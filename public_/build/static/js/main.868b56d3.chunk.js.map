{"version":3,"sources":["component/timer/Timer.tsx","firebase.ts","component/App/App.tsx","serviceWorker.ts","index.tsx","swDev.js"],"names":["Timer","props","state","minutes","seconds","isOn","timer","render","className","style","color","border","width","height","borderRadius","padding","marginLeft","onClick","startTimer","stopTimer","resetTimer","bind","this","Interval","setInterval","setState","clearInterval","Component","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","messaging","requestPermission","then","getToken","token","console","log","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","swDev","process","result","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.868b56d3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Timer.css\";\n// import TimerButton from \"../TimerButton/TimerButton\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\n\nclass Timer extends Component {\n  constructor(props: any) {\n    super(props);\n\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n  }\n  state: {\n    minutes: number;\n    seconds: number;\n    isOn: boolean;\n    timer: any;\n  } = {\n    minutes: 25,\n    seconds: 0,\n    isOn: false,\n    timer: \"\",\n  };\n\n  startTimer() {\n    if (this.state.isOn === true) {\n      return;\n    }\n\n    let Interval = setInterval(() => {\n      const { seconds, minutes } = this.state;\n      if (seconds > 0) {\n        this.setState(({ seconds }: any) => ({\n          seconds: seconds - 1,\n        }));\n      }\n      if (seconds === 0) {\n        if (minutes === 0) {\n          clearInterval(Interval);\n        } else {\n          this.setState(({ minutes }: any) => ({\n            minutes: minutes - 1,\n            seconds: 59,\n          }));\n        }\n      }\n    }, 1000);\n    this.setState({ isOn: true });\n    this.setState({ timer: Interval });\n  }\n\n  stopTimer() {\n    clearInterval(this.state.timer);\n    this.setState({ isOn: false });\n  }\n\n  resetTimer() {\n    this.stopTimer();\n    this.setState({\n      minutes: 25,\n      seconds: 0,\n    });\n  }\n\n  render = () => {\n    const { minutes, seconds } = this.state;\n\n    return (\n      <div className=\"timer-container\">\n        <h1 style={{ color: \"#8a909c\" }}>Timer App</h1>\n        <div\n          style={{\n            border: \"3px solid #d3cadb\",\n            width: \"90px\",\n            height: \"70px\",\n            borderRadius: \"100%\",\n            padding: \"10%\",\n            marginLeft: \"35%\",\n          }}\n        >\n          <h1 className=\"headTime\">\n            {minutes}:{seconds < 10 ? `0${seconds}` : seconds}\n          </h1>\n        </div>\n        <div className=\"timer-button-container\">\n          <button className=\"start-timer\" onClick={this.startTimer}>\n            {\"start\"}\n          </button>\n          <button className=\"stop-timer\" onClick={this.stopTimer}>\n            {\"Stop\"}\n          </button>\n          <button className=\"reset-timer\" onClick={this.resetTimer}>\n            {\"Reset\"}\n          </button>\n        </div>\n        <div>\n          <button className=\"resume-timer\" onClick={this.startTimer}>\n            {!this.state.isOn ? <PlayArrowIcon /> : <PauseIcon />}\n          </button>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default Timer;\n","import * as firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nimport { configFirebase } from \"./context/Typeo\";\n\nconst config: configFirebase = {\n  apiKey: \"AIzaSyB1sUfcWrqOK6lT9QPfGVYvp0aojzONpMs\",\n  authDomain: \"timer-app-18620.firebaseapp.com\",\n  databaseURL: \"https://timer-app-18620.firebaseio.com\",\n  projectId: \"timer-app-18620\",\n  storageBucket: \"timer-app-18620.appspot.com\",\n  messagingSenderId: \"34658892662\",\n  appId: \"1:34658892662:web:c1a9fc7c8ee9041d451857\",\n};\nfirebase.initializeApp(config);\nexport default firebase;\n","import React from \"react\";\nimport \"./App.css\";\nimport Timer from \"../timer/Timer\";\nimport firebase from \"../../firebase\";\n\nconst App = () => {\n  const messaging = firebase.messaging();\n  messaging\n    .requestPermission()\n    .then(() => {\n      return messaging.getToken();\n    })\n    .then((token) => {\n      console.log(\"token\", token);\n    });\n  return (\n    <div className=\"container\">\n      <Timer />\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./component/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { swDev } from \"./swDev\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nswDev();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","export const swDev = () => {\n  let swDev = `${process.env.PUBLIC_URL}/sw.js`;\n  navigator.serviceWorker.register(swDev).then((result) => {\n    console.log(result, \"result\");\n  });\n};\n"],"sourceRoot":""}